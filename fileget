#!/usr/bin/env python3

import re
import sys
import socket
import argparse
import logging as log
import pathlib as path
from urllib.parse import urlparse, ParseResult


def parseAddress(addr):
    addr = addr.split(':')
    return (addr[0], int(addr[1]))


def getAddress(addr, file_server):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.settimeout(30)
            msg = "WHEREIS {}".format(file_server.netloc).encode()

            s.connect(parseAddress(addr.path))

            log.info("Sending request to server " + str(addr.path))
            s.send(msg)

            log.info("Receiving data from server " + str(addr.path))
            data = s.recv(1024).decode()
            # todo: space not required
            data = data.split(" ")
            if data[0] != 'OK':
                sys.exit("Response from server " + str(addr.path) + " not OK")
            log.info("Response OK")
            s.close()
            return urlparse(data[1])
    except:
        sys.exit("Something went wrong getting fileserver address")


def getFile(addr, surl):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(30)

            log.info("Connecting to server " + addr.path)
            s.connect(parseAddress(addr.path))
            mesg = "GET {file} FSP/1.0\r\nHostname: {fileserver}\r\nAgent: xgysel00\r\n\r\n".format(
                file=re.sub(r'^\/', '', surl.path), fileserver=surl.netloc)

            log.info("Sending request to server " + addr.path)
            s.send(mesg.encode())

            file = b""
            log.info("Receiving data from server " + addr.path)
            while True:
                data = s.recv(1024)
                if len(data) == 0:
                    break
                file = b''.join([file, data])
            s.close()
            return file
    except:
        sys.exit("Something went wrong getting file")


def checkFile(file):
    regex = br"^FSP\/1\.0 Success\r\nLength:\d+(\r\n){1,2}"

    head = re.search(regex, file)
    # print(head)
    if head == None:
        sys.exit("Something went wrong downloading file, missing header")
    file = re.sub(regex, b"", file)

    lenght = int(head.group().split(b'\r\n')[1].split(b':')[-1])
    if lenght != len(file):
        sys.exit("Something went wrong downloading file")
    return file


def copyFile(filename, file):
    file = checkFile(file=file)

    try:
        filepath = filename.split('/')
        filename = filepath[-1]
        filepath = "/".join(filepath[1:-1])

        path.Path(filepath).mkdir(parents=True, exist_ok=True)
        data_folder = path.Path(filepath)

        log.info("Opening file " + filename + " in directory " + filepath)
        f = open(data_folder / filename, "wb")
        f.write(file)
        f.close

    except:
        sys.exit("Somehting went wrong writing to file")

    log.info("Copying finished")


def main():

    log.basicConfig(level=log.INFO)

    # parse program arguments
    ap = argparse.ArgumentParser("Fileget")
    ap.add_argument("-n", required=True)
    ap.add_argument("-f", required=True)

    log.info("Parsing program arguments")
    args = ap.parse_args()

    # get nameserver address
    name_server = urlparse(args.n)
    file_server = urlparse(args.f)
    nameserver = getAddress(addr=name_server, file_server=file_server)

    # get file OR get all?
    if file_server.path.split('/')[-1] == '*':
        # get all

        # get index
        file_server = ParseResult(file_server.scheme, file_server.netloc,
                                  'index', file_server.params, file_server.query, file_server.fragment)

        index = getFile(addr=nameserver, surl=file_server)
        index = checkFile(file=index)

        fileList = index.decode().split('\r\n')
        fileList.remove('')

        # get all files
        for file in fileList:
            file_server = ParseResult(file_server.scheme, file_server.netloc,
                                      file, file_server.params, file_server.query, file_server.fragment)
            fileContent = getFile(addr=nameserver, surl=file_server)
            copyFile('/'+file_server.path, fileContent)
    else:
        # get file
        file = getFile(addr=nameserver, surl=file_server)
        copyFile(file_server.path, file)


if __name__ == "__main__":
    main()
